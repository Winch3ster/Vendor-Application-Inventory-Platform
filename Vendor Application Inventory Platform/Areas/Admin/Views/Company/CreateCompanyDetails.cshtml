﻿@using Newtonsoft.Json
@using Newtonsoft.Json
@model Vendor_Application_Inventory_Platform.Areas.Admin.ViewModels.CreateCompanyDetailsViewModel
@{
    Layout = "_AdminControlPanel";
    ViewData["title"] = "Company Details";
}

<div class="container-fluid">
    @Html.AntiForgeryToken()
      <div class="card mt-5">
        <div class="card-header">
          Add Countries
          <div class="progress mt-3" style="display: none;">
            <div class="progress-bar bg-info progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
          </div>
          </div>
        <form id="countryForm" class="d-flex flex-column">
          @Html.AntiForgeryToken()
          <div class="card-body">
            <div id="country-container">
              @if (Model.Countries.Any())
              {
                @for (var i = 0; i < Model.Countries.Count(); i++)
                {
                  @if (i == 0)
                  {
                    <div class="p-1">
                      <input type="text" class="form-control text-uppercase" placeholder="Country" value="@Model.Countries[i].CountryName" pattern="[A-Za-z ]+" title="Alphabet and spaces only" required>
                    </div>
                  }
                  else
                  {
                    <div class="input-group p-1">
                      <input type="text" class="form-control text-uppercase" placeholder="Country" value="@Model.Countries[i].CountryName" pattern="[A-Za-z ]+" title="Numbers are not allowed" required>
                      <div class="input-group-append">
                        <span class="input-group-text btn btn-danger bi bi-dash" onclick="deleteCountry(event)"></span>
                      </div>
                    </div>
                  }
                }
              }
              else
              {
                <div class="p-1">
                  <input type="text" class="form-control text-uppercase" placeholder="Country" pattern="[A-Za-z ]+" title="Alphabet and spaces only" required>
                </div>
              }
              
            </div>

            <div class="d-flex justify-content-center mt-2">
              <div id="addCountryBtn" class="btn btn-primary bi bi-plus" style="width:50px" onclick="addCountry()"></div>
            </div>

          </div>
          <div class="card-footer d-flex justify-content-end">
            <div class="btn btn-info me-2" onclick="countryCancel()">Cancel</div>
            <button id="CountrySubmitBtn" class="btn btn-info">Submit</button>
          </div>
        </form>
    
    
  </div>
  <div id="tabs" class="row d-none mt-5">
    <ul class="nav nav-tabs">
      <div class="tab-pane fade show active"></div>
    </ul>
    <div id="tab-content" class="p-0"></div> 
  </div>
  <div class="row mt-3">
    <div class="col d-flex justify-content-end">
      <button id="submitBtn" class="btn btn-primary d-none">
        <div class="spinner-border spinner-border-sm text-info d-none" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
        <span>Submit</span>
      </button>
    </div>
    
  </div>
  
</div>

@section Scripts
{
  <script>
  let id = @Model.companyId;
  $('#add-company').removeClass('indicator-off');
      
  $(document).ready(function(){
    
    //Check if model is presented in the page
    //I presented, lock the submit button and loop through all available countries, cities, and the rest
    if (@Model.Countries.Any().ToString().ToLower()){
      let countries = @Html.Raw(JsonConvert.SerializeObject(Model.Countries))
      let countryNames= [];
      disableCountryInputs();
      
      for (let i=0; i < countries.length; i++){
        countryNames.push(countries[i].CountryName)
      }
      
    countriesToTabs(countryNames, countries);
      
    }
    
  })
     

  let deleteCities=[], ModelCitiesName=[], InputCitiesName=[], InputCities=[];
  function disableCountryInputs(){
    let countryInputs = $("[placeholder='Country']");
          countryInputs.each(function () {
           $(this).prop('disabled',true);
         });
          
    $("#addCountryBtn").attr('onclick','alert("Press Cancel First")');
            $(".bi-dash").attr('onclick', 'alert("Press Cancel First")');
            $("#tabs").removeClass('d-none');
            $('.nav-tabs').empty();
            $('#tab-content').empty();
            $('#submitBtn').removeClass('d-none');
            $('#CountrySubmitBtn').prop('disabled',true)
  }
  
  $('#countryForm').on('submit', function (e){
    e.preventDefault();
    disableCountryInputs();
    let countries = [];
    let countryInputs = $("[placeholder='Country']");
    let csrfToken = $('#countryForm > input[name="__RequestVerificationToken"]').val();

    
     countryInputs.each(function () {
       countries.push($(this).val());
     });
     
      $('.progress').show();
      $('.progress-bar').css('width', '0%');
     
     const formData = { 'countryNames': countries };
        
        $.post({
          url:"@Url.Action("CreateCountry")" + "?id="+ id,
          data:formData,
          dataType: 'json',
          headers: {
                  "RequestVerificationToken": csrfToken
              },
          xhr: function () {
                              let xhr = new window.XMLHttpRequest();
                              xhr.upload.addEventListener("progress", function (evt) {
                                  if (evt.lengthComputable) {
                                      let percentComplete = (evt.loaded / evt.total) * 100;
                                      $('.progress-bar').css('width', percentComplete + "%");
                                  }
                              }, false);
                              return xhr;
                          },
          success:function (data){
            
            $('.progress').hide();
            
            if (data.success){
              if (@Model.Countries.Any().ToString().ToLower()){
                let countries = @Html.Raw(JsonConvert.SerializeObject(Model.Countries))
                countriesToTabs(data.countryNames, countries)
              }
              else{
               countriesToTabs(data.countryNames); 
              }
            }
            else if (data.message){
              alert(data.message);
            }
            else{
              alert('Something went wrong')
            }
            
          },
          error:function (){
            $('.progress').hide();
            alert('Something went wrong')
          }
        })
  })
  
  let addCountry = () => {
    let countryField = `<div class="input-group p-1">
                            <input type="text" class="form-control text-uppercase" placeholder="Country" pattern="[A-Za-z ]+" title="Numbers are not allowed" required>
                            <div class="input-group-append">
                                 <span class="input-group-text btn btn-danger bi bi-dash" onclick="deleteCountry(event)"></span>
                            </div>
                        </div>`
    $('#country-container').append(countryField);
  }
  
  let countryCancel = () => {
    let countries = $("[placeholder='Country']");
    countries.each(function (){
      $(this).prop('disabled',false);
    })
    $("#addCountryBtn").attr('onclick','addCountry()');
    $(".bi-dash").attr('onclick', 'deleteCountry(event)');
    $("#tabs").addClass('d-none');
    $('#submitBtn').addClass('d-none');
    $('#CountrySubmitBtn').prop('disabled',false)
  }
  
  let deleteCountry = (e) => {
    $(e.target).parent().parent().remove();
  }
  
  let countriesToTabs = (countryNames, countries) => {
    let Countries = countries
    $.each(countryNames, function (index, value){
        if (value.trim() !== '') {

                    $('.nav-tabs').append(`
                        <li class="nav-item">
                            <a id="${value.replace(/\s/g, '-')}-tab" class="nav-link" aria-current="page" onclick="tabsActive(event)" href="#${value.replace(/\s/g, '-')}">${value}</a>
                        </li>
                    `);
        
                    let cityContainer = `
                        <div id="${value.replace(/\s/g, '-')}" class="cityContainer border border-top-0 py-4 px-3"></div>
                    `;
                    $('#tab-content').append(cityContainer);
                    
                    //Makes multiple accordion based on Model or makes one default
                   if (Countries){
                     for (let i=0; i< Countries.length; i++){
                       if (Countries[i].CountryName==value){
                         if (Countries[i].Cities.length!==0){
                           for(let j=0; j< Countries[i].Cities.length;j++){
                             accordionForCities(value, Countries[i].Cities[j]);
                             ModelCitiesName.push(Countries[i].Cities[j].CityName);
                           }
                         }
                         else{
                           accordionForCities(value);
                         }
                       }
                       else{  
                         let backendCountryNames = Countries.map(country=> country.CountryName);
                         
                         //Country that are just created in the front end and not exists in the view model yet
                         let frontEndCreatedCountry = countryNames.filter(name => !backendCountryNames.includes(name))
                         if (frontEndCreatedCountry.length!==0){
                           location.reload();
                         }
                       }
                     }
                   }
                   else{
                     accordionForCities(value);
                   }
                   
                }
    })
    tabsActive();
  }
  
  let accordionForCities = (element, CityModel) => {
    let cityName = "",address = null, contact = null;
    if (CityModel){
      cityName=CityModel.CityName;
      address=CityModel.Address;
      contact=CityModel.Contact;
    }

    //Check whether its the first default accordion or user triggered add accordion button
    let country = element?.target?$(element.target).closest('.cityContainer').attr('id'):element.replace(/\s/g, '-');
    //Get not used city number for ID to avoid duplicate ID before appending accordion
    let cityNumTaken=[];
    $('#'+country+' .accordion-collapse').each(function (){
      //Always get the last element of split that contains the city number
      let split = this.id.split('-')
      let cityTaken = split[split.length-1]
      cityNumTaken.push(parseInt(cityTaken.match(/\d+/g)))
      
    })
    
    //Find the ideal city number for accordion ID
    let cityNumber =1;
    while(cityNumTaken.includes(cityNumber)){
      cityNumber++;
    }
    let addCitiesBtn = `<div class="d-flex justify-content-center mt-2">
                            <button class="btn btn-primary bi bi-plus w-25" onclick="accordionForCities(event)"></button>
                        </div>`;
    let accordion = `<div class="accordion">
                             <div class="accordion-item">
                                 <h2 class="accordion-header">
                                   <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#${country}-city${cityNumber}" aria-expanded="false" aria-controls="${country}-city${cityNumber}">
                                     City #${cityNumber}
                                   </button>
                                 </h2>
                                 <div id="${country}-city${cityNumber}" class="accordion-collapse collapse" aria-labelledby="${country}-city${cityNumber}">
                                   <div class="accordion-body">
                                     <form>
                                                     @Html.AntiForgeryToken()
                                                     <div>
                                                       <input type="checkbox" class="address">
                                                       <label>Has Address</label>
                                                       <input class="contact ms-2" type="checkbox">
                                                       <label>Has Contact</label>
                                                     </div>
                                                     <div class="p-2 mt-2">
                                                       <input type="hidden" class="form-control" name="country" value="${country.replace(/-/g, ' ')}">
                                                       <h5 class="mt-2">City</h5>
                                                       <input type="text" class="form-control text-uppercase" name="cityName" placeholder="City" value="${cityName}" required>
                                                       <div class="addressField mt-2 d-none">
                                                         <h5>Address</h5>
                                                         <input type="text" class="form-control mt-1" name="address1" placeholder="Address 1" value="${address ? address.AddressLine1 ?? "" : ""}">
                                                         <input type="text" class="form-control mt-1" name="address2" placeholder="Address 2" value="${address ? address.AddressLine2 ?? "" : ""}">
                                                         <input type="text" class="form-control mt-1" name="postcode" placeholder="Postcode" value="${address ? address.PostCode ?? "" : ""}">
                                                         <input type="text" class="form-control mt-1" name="state" placeholder="State" value="${address ? address.State ?? "" : ""}">
                                                       </div>
                                                       <div class="contactField mt-2 d-none">
                                                         <h5>Contact</h5>
                                                         <input type="number" class="form-control mt-1" name="contact" placeholder="Contact Number" value="${contact ? contact.ContactNumber ?? "" : ""}">
                                                       </div>
                                                     </div>
                                                   </form>
                                   </div>
                                 </div>
                               </div>
                           </form>`;
    //If the accordion not the first accordion, remove the plus button and append it later after the appended the accordion
    //Also added delete city button for second city and beyond
    if ($('#'+country).children('.accordion').length!==0){
      $(element.target).parent().remove()
      accordion = $(accordion).find('.accordion-body').append(`<div class="d-flex justify-content-end">
                                                                                           <button class="btn btn-danger" onclick="deleteCity(event)">Delete City</button>
                                                                                       </div>`).end();
    }
    
    if (element.target){
      $('.cityContainer#'+country).append(accordion).append(addCitiesBtn);
    }
    else{
      if ($('#'+country).children('.accordion').length!==0){
        $('#'+country).find('.bi-plus').parent().remove();
      }
      $('.cityContainer#'+country).append(accordion).append(addCitiesBtn);
    }
    
    //Check Address and/or contact checkbox field for different cities
    if (address !=null && address.AddressLine1 !==null && address.AddressLine2 !==null && address.PostCode !=null){
      $(`#${country}-city${cityNumber}`).find('.address').prop('checked', true).change();
    }
    
    if (contact !=null && contact.ContactNumber != null){
      $(`#${country}-city${cityNumber}`).find('.contact').prop('checked', true).change();
    }
    
    
  }
  
  let tabsActive = (e) => {
    
    let tabs = $('.nav-link');
    
    $('.cityContainer').addClass('d-none')
    if ($('.nav-link.active').length>0){
      tabs.removeClass('active')
      $(e.target).addClass('active');
    }
    else{
      tabs.first().addClass('active');
    }
    
    tabs.each(function (){
                      let split = $(this).attr('id').split('-');
                      let id = split.slice(0, -1).join('-');
                      if ($(this).hasClass('active')){
                        $('#'+id).removeClass('d-none')
                      }
                    })
    
      
    
    
  }
  
  let deleteCity = (e) => {
    //Push Cities Name that are deleted into an array
    let target = $(e.target).parent().siblings().children('div');
    deleteCities.push({
      Country: target.children('[name=country]').val(),
      City: target.children('[name=cityName]').val()
    });
    let removeAccordionID = $(e.target).closest('.accordion-collapse').attr('id')
    let removeAccordionCityNumber = parseInt(removeAccordionID.match(/\d+/g))
    let country = $(e.target).closest('.cityContainer').attr('id')
    
    //Remove the selected accordion
    let accordion = $(e.target).closest('div.accordion')
    accordion.remove();
    
    //Rename the accordions
    $('#'+country+' .accordion .accordion-collapse').each(function (){
          let currentAccordionCityNumber = parseInt(this.id.match(/\d+/g));
          if (currentAccordionCityNumber > removeAccordionCityNumber){
            let button = $(this).siblings('.accordion-header').children('button');
            accordion = $('#'+this.id);
            let arrangedID = currentAccordionCityNumber-1;
            button.attr('aria-controls', country+'-'+'city'+arrangedID)
            button.attr('data-bs-target', '#' + country+'-' + 'city' + arrangedID)
            button.text('City #' + arrangedID)
            accordion.attr('id', country+'-'+'city'+arrangedID)
            accordion.attr('aria-labelledby', country+'-'+'city'+arrangedID)
          }
     })
  }
  
  $('#tab-content').on('change','input[type="checkbox"]', function(e){
    
        let className = $(e.target).attr('class').split(' ')[0];
        let target = $(e.target).parent().siblings().children('.'+className+'Field');
        
        if ($(e.target).is(':checked')){
          target.removeClass('d-none');
        }
        else{
          target.addClass('d-none')
          target.find('input').val('');
        }
  })
  
  
  //Check if user pressed the final submit button
  $('#submitBtn').click(function (){
    InputCitiesName = [];
    InputCities = [];
    //check is all the required field are filled
    let validate = true;
    
    
    $('#tab-content').children().each(function (){
      let id = this.id;
      $(`#${id} .accordion-body > form`).each(function (){
            if (!validate){
              return false;
            }
            //if address or contact field is enabled, make those field a required field
            if ($(this).find('.address').prop('checked')){
              
              $('.addressField > input').prop('required', true)  
              
            }
            else{
              $('.addressField > input').prop('required', false) 
            }
            
            if ($(this).find('.contact').prop('checked')){
              $('.contactField > input').prop('required', true) 
            }
            else{
              $('.contactField > input').prop('required', false) 
            }
            
            
            if (!this.checkValidity()){
              validate=false;
              //Show the tabs and accordion that causes the validation
              $(`#${id}-tab`).click();
              let accordionCityFieldName = $(this).parent().parent().attr('aria-labelledby');
                      let accordionBtn = $(`[aria-controls=${accordionCityFieldName}]`);
                      if (accordionBtn.hasClass('collapsed')){
                        accordionBtn.click();
                      }
                      this.reportValidity();
                      
              return false;
            }
            
          })
    })
    if (validate){
      //Disable the submit button and show spinner when form is valid and ready to submit
         let submitBtn = $('#submitBtn');
        submitBtn.prop('disabled', true);
        submitBtn.children('span').addClass('d-none');
        $('.spinner-border').removeClass('d-none');
        
        let deleteRequest=null;
        
        if (deleteCities.length!==0){
          deleteRequest = new Promise((resolve, reject)=>{
            let data = {
               deleteCities: deleteCities
            }
            
            let csrfToken = $('.container-fluid > [name="__RequestVerificationToken"]').val();
            $.post({
                 url:'@Url.Action("DeleteCities")' + "?id="+ id,
                 data:JSON.stringify(data),
                 dataType:"json",
                 contentType: 'application/json',
                 headers: {
                     "RequestVerificationToken": csrfToken
                 },
                 success:function (data){
                   if (data.success){
                     resolve();
                   }
                 },
                 error:function (){
                   alert('Failed to delete country')
                 }
            })
          })
                   
        }
       
        //if one of the form is not submitted, submittedAll will be false, therefore alert wont be triggered
        let submittedAll = true;
        $('.accordion-body > form').each(function (){
                     
                     //Store cities name that are inputted by user
                     InputCities.push({
                        Country: $(this).find("input[name='country']").val(),
                        City: $(this).find("input[name='cityName']").val()
                      
                     })
                     
                     InputCitiesName.push($(this).find("input[name='cityName']").val())
                      
                     //Get the data for each of the form
                     const data = {
                       HasAddress: $(this).find(".address").prop("checked"),
                            
                       HasContact: $(this).find(".contact").prop("checked"),
                       
                       CityName: $(this).find(".form-control[placeholder='City']").val(),
                          
                       Address1: $(this).find(".form-control[placeholder='Address 1']").val(),
                          
                       Address2: $(this).find(".form-control[placeholder='Address 2']").val(),
                          
                       Postcode: $(this).find(".form-control[placeholder='Postcode']").val(),
                               
                       ContactNumber: $(this).find(".form-control[placeholder='Contact Number']").val(),
                         
                       Country: $(this).find("input[name='country']").val(),
                       
                       State: $(this).find("input[name='state']").val(),
                       
                       Csrf: $(this).find('input[name="__RequestVerificationToken"]').val()

                       };
                     
                     
                     
                     //replaces empty string with null
                     for (const key in data) {
                         if (data[key] === "") {
                             data[key] = null;
                         }
                     }
                     
                     
                     if (deleteRequest===null){
                       let response = finalSubmit(data)
                       if (!response){
                         submittedAll=false;
                       }
                     }
                     else{
                       deleteRequest.then(function (){
                        let response = finalSubmit(data)
                          if (!response){
                          submittedAll=false;
                          }
                        })
                     }
                     
                   })

        //Check if there are presented in model but doesnt exist in the inputted cities
        let missingCities = findMissingCities(InputCitiesName,ModelCitiesName)
        
        //If there are missing cities, check if its in the deleteCities array
        //if its exists in the deleteCities array, remove it from the missing cities array else triggered the deleteCity function
        if (missingCities.length!==0){
          for(let i =0; i<deleteCities.length; i++){
            const cityToDelete = deleteCities[i].City;
           
            // Find the index of the city in missingCities array
            const index = missingCities.findIndex(cityObj => cityObj.city === cityToDelete);
            
            // Remove the city from missingCities if it's found
            if (index !== -1) {
                missingCities.splice(index, 1);
            }
            
          }
          
          //if there are still missing cities, trigger the deleteCity function
          if (missingCities.length!==0){
            let deleteCitiesArray = [];
              for (let i =0; i<missingCities.length; i++){
                let deleteCity = {
                        Country: InputCities[missingCities[i].index].Country,
                        City: missingCities[i].city
                    };
                
                    deleteCitiesArray.push(deleteCity);
                           
              }
              
              let data = {
                  deleteCities: deleteCitiesArray
              };
              
              let csrfToken = $('.container-fluid > [name="__RequestVerificationToken"]').val();
              $.ajax({
                  type: 'POST',
                  url: '@Url.Action("DeleteCities")' + "?id=" + id,
                  data: JSON.stringify(data),
                  dataType: 'json',
                  contentType: 'application/json',
                  headers: {
                      'RequestVerificationToken': csrfToken
                  },
              });
          }
        }
        if (submittedAll){
           alert('Successfully submitted')
        }
        }
       
  })
  
  function findMissingCities(modelCitiesName, inputCitiesName){
    return inputCitiesName
            .map((city, index) => ({ city, index })) // Map each city to an object with city and index
            .filter(({ city }) => !modelCitiesName.includes(city)); // Filter out cities present in modelCitiesName
  }
  
  function finalSubmit(data){
    let response = true;
          $.post({
              url:'@Url.Action("CreateCities")' + "?id="+ id,
              data: JSON.stringify(data),
              dataType:"json",
              contentType: 'application/json',
              async:false,
              headers: {
                  "RequestVerificationToken": data.Csrf
              },
              success:function (data){
                if (data.errors){
                  alert(`${data.errors}\n\nCountry: ${data.country}\nCity: ${data.city}`)
                  response = false;
                }
                else{
                  response = true;
                }
              },
              error:function (){
                alert('Failed to submit, please try again')
                response = false;
              }
          }).done(function (){
            let submitBtn = $('#submitBtn');
            submitBtn.prop('disabled', false);
            submitBtn.children('span').removeClass('d-none');
            $('.spinner-border').addClass('d-none');
          })
          
          return response;
            
  }
    </script>
}