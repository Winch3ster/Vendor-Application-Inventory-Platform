@using Vendor_Application_Inventory_Platform.Areas.User.ViewModels;
@using System.Linq

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@model SoftwareIndexVM

@{
    Layout = "_EmployeeControlPanel";
    ViewData["title"] = "Home";
}


<div>
    <h3>Hey there! Welcome back to Vendor Application Inventory</h3>
    <div class="input-group mt-4">


        <form asp-action="Index" method="get">


            <div class="p-0 border-1 rounded p-2 d-flex align-items-center justify-content-between">
                <div class="form-floating">

                    <input type="text" class="form-control" id="search" placeholder="Username" size="30" name="searchString">
                    <label for="search">Look for the application name <i class="bi-search"></i></label>
                </div>
                <button type="submit" hidden></button>

            </div>

        </form>

        <div class="row mt-4">
            @if (Model.userClaims.Any(c => c.Type == "companyAccess" && c.Value == "true"))
            {
                <div class="dropdown" style="width:200px">
                    <button class="btn btn-secondary dropdown-toggle w-100" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                        Company Actions
                    </button>
                    <ul class="dropdown-menu p-0">
                        <li class="dropdown-item">
                            <a class="btn" asp-area="Admin" asp-controller="Company" asp-action="Index" class="d-block py-2 px-3">View Companies</a>
                        </li>
                        <li class="dropdown-item">
                            <a class="btn" asp-area="Admin" asp-controller="Company" asp-action="CreateCompany" class="d-block py-2 px-3">Create Company</a>
                        </li>
                    </ul>
                </div>
            }
            @if (Model.userClaims.Any(c => c.Type == "accountAccess" && c.Value == "true"))
            {
                <div class="dropdown" style="width:200px">
                    <button class="btn btn-secondary dropdown-toggle w-100" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                        Employee Actions
                    </button>
                    <ul class="dropdown-menu p-0">
                        <li class="dropdown-item">
                            <a class="btn" asp-area="Admin" asp-controller="Employee" asp-action="Index" class="d-block py-2 px-3">View Employees</a>
                        </li>
                        <li class="dropdown-item">
                            <a class="btn" asp-area="Admin" asp-controller="Employee" asp-action="Create" class="d-block py-2 px-3">Create Employee</a>
                        </li>
                    </ul>
                </div>
            }
            @if (Model.userClaims.Any(c => c.Type == "softwareAccess" && c.Value == "true"))
            {
                <div class="dropdown" style="width:200px">
                    <button class="btn btn-secondary dropdown-toggle w-100" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                        Software Actions
                    </button>
                    <ul class="dropdown-menu p-0">
                        <li class="dropdown-item">
                            <a class="btn" asp-area="Admin" asp-controller="Software" asp-action="Index" class="d-block py-2 px-3">View Software</a>
                        </li>
                        <li class="dropdown-item">
                            <a class="btn" asp-area="Admin" asp-controller="Software" asp-action="CreateSoftware" class="d-block py-2 px-3">Create Software</a>
                        </li>
                    </ul>
                </div>
            }
        </div>
    </div>


</div>
<div class="mt-5">
    <h3>Result(s)</h3>
    <div class="row gy-4">

        @foreach (var returnedSoftware in Model.returnedSoftwares)
        {
            <div class="col-lg-4" style="margin: 20px 0">
                <!-- <p@returnedSoftware.SoftwareName</p> -->
                <img src="../../@Url.Content(returnedSoftware.ImagePath)" class="software-image-link" style="width:250px; height:200px; object-fit:contain; object-position:center" onclick="NavigateToViewDetailsPage(@returnedSoftware.SoftwareID)"/>
            </div>
        }

    </div>
</div>
<div class="mt-5">
    <h3>Recently Viewed</h3>
    <div class="row g-4">
        @foreach (var recentlyViewedSoftware in Model.recentlyViewed)
        {
            <div class="col-lg-4" style="margin: 20px 0">
                @* <!-- <p@returnedSoftware.SoftwareName</p> --> *@
                <img src="../../@Url.Content(recentlyViewedSoftware.ImagePath)" class="software-image-link" style="width:250px; height:200px; object-fit:contain; object-position:center" onclick="NavigateToViewDetailsPage(@recentlyViewedSoftware.SoftwareID)"/>
            </div>
        }

    </div>
</div>

@section Scripts{
    <script>
        $(document).ready(function () {
            //append the selected filter to the url
            $('#filterApplyBtn').on('click', function () {
                let checkedList = $('#softwareTypeList input:checked').map(function () {
                    return $(this).attr('id');
                }).get();
                let url = window.location.href;
                    let newUrl = url.split('?')[0];
                    let originalSearchString = getUrlParameter('searchString');
                
                    if (checkedList.length > 0 || originalSearchString) {
                        newUrl += '?';
                
                        // Keep the original searchString if present
                        if (originalSearchString) {
                            newUrl += 'searchString=' + originalSearchString + '&';
                        }
                
                        // Add new parameters based on selected checkboxes
                        for (let i = 0; i < checkedList.length; i++) {
                            newUrl += 'filter=' + checkedList[i] + '&';
                        }
                
                        newUrl = newUrl.slice(0, -1);
                    }
                
                    window.location.href = newUrl;
            });
            
            let filterList = getUrlParameter('filter');
            if (filterList.length > 0) {
                let filterArray = filterList.flat(); // flatten the array
                for (let i = 0; i < filterArray.length; i++) {
                    $('#' + filterArray[i]).prop('checked', true);
                }
            }


        })
        
        function getUrlParameter(name) {
            name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
            let regex = new RegExp('[\\?&]' + name + '=([^&#]*)', 'g');
            let results = [];
            let match;
            while ((match = regex.exec(location.search)) !== null) {
                results.push(decodeURIComponent(match[1].replace(/\+/g, ' ')));
            }
            return results;
        }


        function NavigateToViewDetailsPage(softwareid) {
            console.log(`Going to page with id: ${softwareid}`)
            // Replace 'YourController' and 'YourAction' with the appropriate controller and action names
            var url = '@Url.Action("Details", "Software", new { softwareid = "__softwareid__" })';
            url = url.replace('__softwareid__', softwareid);
            window.location.href = url;
        }

    </script>
}